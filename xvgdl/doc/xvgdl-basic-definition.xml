<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!-- Definition of a basic simple game with all elements -->

<!-- Root element -->
<gameDefinition>

  <!-- Defining game layout. Where to locate the menus, lives information, score, etc... Outside the game map. 
  It can reference game objects to be included.
  CENTER Location is always reserved for game screen
  Attributes:
  id=Identifier
  location=[TOP|DOWN|LEFT|RIGHT]
  -->
  <layout>
    <component id="gameInfo" location="DOWN">
      <objectRef id="score"/>
      <objectRef id="lives"/>
      <objectRef id="time"/>
      <objectRef id="items"/>
      <!-- Reference all needed objects -->
    </component>
  </layout>

  <!-- Defining the map of the game 
  Attributes:
  type=[2D|3D]
  size=[x,y[,z]] : Size will be pixels, characters or whatever the concrete implementation decides
  generator=classname: Study if this is a property or is general implementation dependent.
  spherical=[true|false]: Indicates if the limits of the map are endings or elements can appear in the opposite side
  renderer=classname
  -->
  <map type="2D" size="500,500" spherical="false">
  </map>
  
  <!-- Defining the Objects present in the game (NPCs, Obsctacles, projectiles, structures, collectibles, etc... -->
  <objects>
    <!-- List of Object Definition
    All objects will have a position and a size. If not specified, size will be always 1 in all axis 
    Attributes:
    renderer=classname
    size=[x,y[,z]]
    position=[x,y[,z]]
    dynamic=[true|false]: Indicates wether the object can move or change its state or not
    volatile=[true|false]: Indicates if an object can appear/disappear from game 
    avatar=classname: Avatar representing the object
    -->
    <object>
    </object>
  </objects>
  
  <!-- Players Definition -->
  <players number="" maxNumber="" minNumber="">
    <!-- Player definition 
    object=objectReference: Sets the current object of the player. It can be changed during game
    -->
    <player id="Player 1" object="objectId">
  </players>
  
  <!-- Avatars ? -->
  <avatars>
    
  </avatars>
  
  <!-- Defining Game physics. Movements and collisions 
  Define set of possible physics action: gravitational pull, friction, repulsion forces, bouncing effects, stickiness, etc
  Define the 
  -->
  <physics>
  </physics>
  
  <!-- Defining game events. Events sent from the player via input devices, timed or random events, and object collision triggered events that affect the game -->
  <events>
    <event id="eventId" rule="ruleId">
  </events>
  
  <!-- Defining rules. Events consecuences -->
  <rules>
    <!-- Every rule is defined by:
    An ID which will be referenced by events
    A list of 0..N objects can be involved in a rule
    Rules can be provoked by an event (attribute type=eventual) or always to be checked (type=permanent)
    -->
    <rule id="ruleId" type="eventual">
      <!-- 
      Objetc ref attributes
      -->
      <ref id="objectRef1">
        <!-- Action options
        action="[scoreUp[,n]|scoreDown[,n]|scoreReset[,n]|livesUp[,n]|livesDown[,n]|livesReset[,n]|disappear|duplicate[,x,y,z]|teletransport[,x,y,z]|freeze[,time]|transform,objecRef]|bounce[,n]"
        -->
        <action id="scoreUp,1000">
      <ref id="objectRef2">
    </rule>
  </rules>
</gameDefinition>
